// Generated by CoffeeScript 1.10.0
(function() {
  var connectionStateMap, parsePatterns;

  parsePatterns = {
    netsh_line: new RegExp(/([^:]+): (.+)/)
  };

  connectionStateMap = {
    connected: "connected",
    disconnected: "disconnected",
    associating: "connecting"
  };

  module.exports = {
    autoFindInterface: function() {
      var _iface, _interface, _msg, findInterfaceCom;
      this.WiFiLog("Host machine is Windows.");
      findInterfaceCom = "echo wlan";
      this.WiFiLog("Executing: " + findInterfaceCom);
      _interface = this.execSync(findInterfaceCom);
      if (_interface) {
        _iface = _interface.trim();
        _msg = "Automatically located wireless interface " + _iface + ".";
        this.WiFiLog(_msg);
        return {
          success: true,
          msg: _msg,
          "interface": _iface
        };
      } else {
        _msg = "Error: No network interface found.";
        this.WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg,
          "interface": null
        };
      }
    },
    getIfaceState: function() {
      var KEY, VALUE, connectionData, error, error1, i, interfaceState, k, len, ln, ln_trim, parsedLine, ref;
      interfaceState = {};
      connectionData = this.execSync("netsh " + this.WiFiControlSettings.iface + " show interface");
      ref = connectionData.split('\n');
      for (k = i = 0, len = ref.length; i < len; k = ++i) {
        ln = ref[k];
        try {
          ln_trim = ln.trim();
          if (ln_trim === "Software Off") {
            interfaceState = {
              ssid: null,
              connected: false,
              power: false
            };
            break;
          } else {
            parsedLine = parsePatterns.netsh_line.exec(ln_trim);
            KEY = parsedLine[1].trim();
            VALUE = parsedLine[2].trim();
          }
        } catch (error1) {
          error = error1;
          continue;
        }
        interfaceState.power = true;
        switch (KEY) {
          case "State":
            interfaceState.connection = connectionStateMap[VALUE];
            break;
          case "SSID":
            interfaceState.ssid = VALUE;
            break;
          case "Radio status":
            if (VALUE === "Hardware Off") {
              interfaceState = {
                ssid: null,
                connected: false,
                power: false
              };
              break;
            }
        }
        if (KEY === "SSID") {
          break;
        }
      }
      return interfaceState;
    }
  };

}).call(this);
